{"version":3,"sources":["Components/RecipeList.js","Components/Form.js","App.js","Components/RecipePage.js","Components/Router.js","serviceWorker.js","index.js"],"names":["RecipeList","props","react_default","a","createElement","className","CurrentRecipeList","length","map","currentRecipe","key","question_id","title","slice","src","image_url","alt","Math","floor","social_rank","Link","to","pathname","concat","recipe_id","state","recipe","Form","onSubmit","FetchRecipes","type","name","placeholder","class","App","currentRecipeList","fetchRecipes","_callee","e","searchTerm","api_call","api_data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","recipes","stop","Components_Form","this","Components_RecipeList","Component","RecipePage","componentDidMount","request","response","location","publisher","href","source_url","Router","HashRouter","basename","process","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","Components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6ca718f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RecipeList = (props) => {\r\n    return (\r\n        <div className='recipe__list__div'>\r\n            <ul className=\"recipe__list__grid\">\r\n                {props.CurrentRecipeList.length === 0 && <h4 className='recipe__list__enter__message'>Enter a search term to view recipes...</h4>}\r\n                {props.CurrentRecipeList.length > 0 && props.CurrentRecipeList.map(currentRecipe => {\r\n                    return (\r\n                    <div className='recipe__list__map__through' key={currentRecipe.question_id}>\r\n                        <div>\r\n                            <li className='recipe__list__title'>{currentRecipe.title.length > 22 ? currentRecipe.title.slice(0, 22) + '...' : currentRecipe.title}</li>\r\n                        </div>\r\n                        <div>\r\n                            <img className='recipe__list__img' src={currentRecipe.image_url} alt={currentRecipe.title + ' img'}/>\r\n                        </div>\r\n                        <div>\r\n                            <p className='recipe__list__rank'>Recipe Rank: {Math.floor(currentRecipe.social_rank)} / 100</p>\r\n                        </div>\r\n                        <div>\r\n                            <button className='recipe__list__buttons'>\r\n                                <Link className='recipe__list__link' to={{ \r\n                                    pathname: `/recipe/${currentRecipe.recipe_id}`,\r\n                                    state: { recipe: currentRecipe.title } \r\n                                }}>\r\n                                    View Recipe\r\n                                </Link>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}   \r\n\r\nexport default RecipeList\r\n\r\n","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.FetchRecipes} className='form'>\r\n                <input type='text' name='recipe' placeholder='Enter a search term...'/>\r\n                <button class=\"form__button\">Find Recipes</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}   \r\n\r\nexport default Form","import React, { Component } from 'react';\nimport RecipeList from './Components/RecipeList';\nimport Form from './Components/Form';\nimport styles from './styles.css';\n\nclass App extends Component {\n  state = {\n    currentRecipeList: [],\n  };\n\n  fetchRecipes = async (e) => {\n    e.preventDefault();\n    const searchTerm = e.target.elements.recipe.value;\n    const api_key = '7ce87499e0323106b2d0ce31162933f5';\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${api_key}&q=${searchTerm}&count=28`);\n    const api_data = await api_call.json()\n\n    this.setState({\n      currentRecipeList: api_data.recipes\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='app__component'>\n          <h1 className='main__h1'>Recipe Search</h1>\n          <Form FetchRecipes={this.fetchRecipes} />\n        </div>\n        <RecipeList CurrentRecipeList={this.state.currentRecipeList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass RecipePage extends Component {\r\n    state = {\r\n        currentRecipe: []\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const title = this.props.location.state.recipe\r\n        const api_key = '7ce87499e0323106b2d0ce31162933f5';\r\n        const request = await fetch(`https://www.food2fork.com/api/search?key=${api_key}&q=${title}`);\r\n        const response = await request.json()\r\n\r\n        this.setState({\r\n          currentRecipe: response.recipes[0]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"recipe__page__div\">\r\n                <div className=\"recipe__page__title\">{this.state.currentRecipe.title}</div>\r\n                <div className=\"recipe__page__publisher\">Published by {this.state.currentRecipe.publisher}</div>\r\n                <div className=\"recipe__page__image__url\"><img src={this.state.currentRecipe.image_url} alt={this.state.currentRecipe.title} /></div>\r\n                <div className=\"recipe__page__source__url\"><a href={this.state.currentRecipe.source_url} >Click here to learn more about this recipe</a></div>\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default RecipePage","import React from 'react';\r\nimport { HashRouter , Switch, Route } from 'react-router-dom';\r\n\r\nimport App from '../App';\r\nimport RecipePage from './RecipePage';\r\n\r\nconst Router  = () => (\r\n    <HashRouter  basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route path={'/'} component={App} exact />\r\n            <Route path={'/recipe/:id'} component={RecipePage} />\r\n        </Switch>\r\n    </HashRouter >\r\n)\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Components/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}